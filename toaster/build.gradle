plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

android {
    compileSdk 32

    defaultConfig {
        minSdk 16
        targetSdk 32
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    compileOnly 'androidx.core:core-ktx:1.3.2'
}

apply plugin: 'maven-publish'
def githubProperties = new Properties()
githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
// 因为用于定义发布类型的components是在afterEvaluate阶段被创建的，所以必须把发布配置写在project.afterEvaluate {}代码块中
project.afterEvaluate {
    // 定义发布
    publishing {
        // 定义要发布到的远程Maven仓库，可以定义多个，gradle会自动生成发送到指定Maven仓库的task
        repositories {
            // GitHub Packages仓库
            maven {
                name = "GitHubPackages"
                // 指定要发布到的GitHub Repository仓库url
                url = uri("https://maven.pkg.github.com/pettersnoopy/toaster")
                credentials {
                    // 用户名和token
                    username = githubProperties.getProperty("gpr.usr")
                    password = githubProperties.getProperty("gpr.key")
                }
            }
        }
        // 定义要发布的包，可以定义多个，gradle会自动生成把不同的包发送到指定的Maven仓库的task
        publications {
            // 发布build variant为miRelease的包，
            uploadGithubAar(MavenPublication) {
                // 依赖 bundleReleaseAar 任务，并上传其产出的aar
                afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) } // 方式一：生成aar包
//                artifact "$buildDir/outputs/aar/${project.name}-release.aar" // 方式二：指定生成的aar路径
                groupId = 'com.axuna.toaster'
                artifactId = 'toaster'
                version = '1.0.0'
            }
        }
    }
}